#!/bin/bash
set -euo pipefail

# üîí Caddy Reverse Proxy Installation Script with SSL

GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[CADDY] $1${NC}"
}

error() {
    echo -e "${RED}[CADDY ERROR] $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[CADDY INFO] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[CADDY WARNING] $1${NC}"
}

# Validate required variables
if [[ -z "${SYNCTHING_HOSTNAME:-}" ]]; then
    error "SYNCTHING_HOSTNAME non d√©fini"
fi

if [[ -z "${DOMAIN_ROOT:-}" ]]; then
    error "DOMAIN_ROOT non d√©fini"
fi

# Check if Caddy is already installed
if command -v caddy >/dev/null; then
    log "Caddy d√©j√† install√© ‚úÖ"
    caddy version
else
    log "Installation de Caddy pour architecture ${DETECTED_ARCH:-$(uname -m)}..."
    
    # Architecture-specific installation
    local arch=$(uname -m)
    local install_method="repository"
    
    case "$arch" in
        "x86_64")
            install_method="repository"
            ;;
        "aarch64")
            install_method="repository"
            ;;
        "armv7l")
            install_method="binary" 
            warn "ARM32: Installation via binaire (d√©p√¥t non disponible)"
            ;;
        "i386"|"i686")
            install_method="binary"
            warn "32-bit: Installation via binaire (d√©p√¥t non disponible)"
            ;;
        *)
            install_method="binary"
            warn "Architecture $arch: Installation via binaire"
            ;;
    esac
    
    if [[ "$install_method" == "repository" ]]; then
        # Repository installation (x86_64, aarch64)
        curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
        curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
        
        # Install Caddy
        apt-get update >/dev/null 2>&1
        apt-get install -y caddy >/dev/null 2>&1
    else
        # Binary installation for unsupported architectures
        local caddy_arch=""
        case "$arch" in
            "armv7l")
                caddy_arch="linux_armv7"
                ;;
            "i386")
                caddy_arch="linux_386"
                ;;
            "i686")
                caddy_arch="linux_386"
                ;;
            *)
                error "Architecture $arch non support√©e pour l'installation binaire de Caddy"
                ;;
        esac
        
        # Download and install Caddy binary
        local caddy_version="2.7.4"
        local download_url="https://github.com/caddyserver/caddy/releases/download/v${caddy_version}/caddy_${caddy_version}_${caddy_arch}.tar.gz"
        
        cd /tmp
        curl -sL "$download_url" -o caddy.tar.gz
        tar -xzf caddy.tar.gz caddy
        chmod +x caddy
        mv caddy /usr/local/bin/
        
        # Create systemd service
        cat > /etc/systemd/system/caddy.service << 'EOF'
[Unit]
Description=Caddy
Documentation=https://caddyserver.com/docs/
After=network.target network-online.target
Requires=network-online.target

[Service]
Type=notify
User=caddy
Group=caddy
ExecStart=/usr/local/bin/caddy run --environ --config /etc/caddy/Caddyfile
ExecReload=/usr/local/bin/caddy reload --config /etc/caddy/Caddyfile
TimeoutStopSec=5s
LimitNOFILE=1048576
LimitNPROC=1048576
PrivateTmp=true
ProtectSystem=full
AmbientCapabilities=CAP_NET_BIND_SERVICE

[Install]
WantedBy=multi-user.target
EOF
        
        # Create caddy user
        useradd --system --home /var/lib/caddy --create-home --shell /usr/sbin/nologin caddy
        
        # Reload systemd
        systemctl daemon-reload
        
        cd "$SCRIPT_DIR"
    fi
    
    log "Caddy install√© pour $arch ‚úÖ"
fi

# Create Caddy configuration directory
mkdir -p /etc/caddy/conf.d

# Generate Caddyfile configuration
log "Configuration de Caddy pour ${SYNCTHING_HOSTNAME}.${DOMAIN_ROOT}..."

# Main Caddyfile
cat > /etc/caddy/Caddyfile << EOF
# Caddy Configuration for Syncthing
# Generated by syncthing-tailscale-deploy

# Global options
{
    # Disable admin API for security
    admin off
    
    # Use internal CA for self-signed certs (no Let's Encrypt)
    # Comment next line if you want real Let's Encrypt certificates
    local_certs
}

# Import all configurations from conf.d
import /etc/caddy/conf.d/*
EOF

# Individual service configuration
cat > "/etc/caddy/conf.d/syncthing.conf" << EOF
# Syncthing reverse proxy configuration
${SYNCTHING_HOSTNAME}.${DOMAIN_ROOT} {
    # Reverse proxy to Syncthing
    reverse_proxy localhost:8384 {
        # Pass through headers for WebSocket support
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Proto {scheme}
    }
    
    # Security headers
    header {
        # Enable HSTS
        Strict-Transport-Security "max-age=31536000; includeSubDomains"
        # Prevent clickjacking
        X-Frame-Options "SAMEORIGIN"
        # Content type sniffing
        X-Content-Type-Options "nosniff"
        # XSS Protection
        X-XSS-Protection "1; mode=block"
        # Remove server information
        -Server
    }
    
    # Logging
    log {
        output file /var/log/caddy/syncthing.log
        format console
    }
    
    # Use internal CA for self-signed certificates
    # Remove this line for real Let's Encrypt certificates
    tls internal
}
EOF

# Create alternative access points
cat > "/etc/caddy/conf.d/syncthing-aliases.conf" << EOF
# Alternative access points for Syncthing

# Round-robin hostname
syncthing.${DOMAIN_ROOT} {
    redir https://${SYNCTHING_HOSTNAME}.${DOMAIN_ROOT}{uri} permanent
}

# VPN hostname redirect  
vpn-syncthing-01.${DOMAIN_ROOT} {
    redir https://${SYNCTHING_HOSTNAME}.${DOMAIN_ROOT}{uri} permanent
}

# Round-robin VPN hostname
vpn-syncthing.${DOMAIN_ROOT} {
    redir https://${SYNCTHING_HOSTNAME}.${DOMAIN_ROOT}{uri} permanent
}
EOF

# Create log directory
mkdir -p /var/log/caddy
chown caddy:caddy /var/log/caddy

# Validate Caddy configuration
log "Validation de la configuration Caddy..."
if caddy validate --config /etc/caddy/Caddyfile; then
    log "Configuration Caddy valide ‚úÖ"
else
    error "Configuration Caddy invalide"
fi

# Enable and start Caddy service
log "D√©marrage du service Caddy..."
systemctl enable caddy >/dev/null 2>&1
systemctl restart caddy

# Wait for Caddy to start
sleep 3

# Verify Caddy is running
if systemctl is-active --quiet caddy; then
    log "Service Caddy d√©marr√© ‚úÖ"
    
    # Test HTTPS endpoint
    log "Test de l'endpoint HTTPS..."
    sleep 5  # Give time for certificate generation
    
    if curl -s -k -f "https://${SYNCTHING_HOSTNAME}.${DOMAIN_ROOT}" >/dev/null 2>&1; then
        log "‚úÖ HTTPS endpoint accessible via Caddy"
    else
        warn "‚ö†Ô∏è  Endpoint HTTPS pas encore accessible (certificat en cours de g√©n√©ration)"
    fi
    
    # Show certificate info
    cert_info=$(echo | openssl s_client -servername "${SYNCTHING_HOSTNAME}.${DOMAIN_ROOT}" -connect "localhost:443" 2>/dev/null | openssl x509 -noout -issuer -subject 2>/dev/null || echo "Certificat en cours de g√©n√©ration")
    info "Certificat SSL: $cert_info"
    
else
    error "√âchec du d√©marrage de Caddy"
fi

# Update Syncthing to use HTTP internally (Caddy handles HTTPS)
log "Configuration de Syncthing pour HTTP interne (Caddy g√®re HTTPS)..."

# Modify Syncthing config to use HTTP internally
python3 << 'EOF'
import xml.etree.ElementTree as ET

config_file = '/opt/syncthing/config/config.xml'
try:
    tree = ET.parse(config_file)
    root = tree.getroot()
    
    gui = root.find('gui')
    if gui is not None:
        gui.set('tls', 'false')  # Disable HTTPS in Syncthing (Caddy handles it)
        tree.write(config_file, encoding='utf-8', xml_declaration=True)
        print("‚úÖ Syncthing configur√© pour HTTP interne")
    else:
        print("‚ö†Ô∏è  Configuration GUI non trouv√©e")
except Exception as e:
    print(f"‚ö†Ô∏è  Erreur lors de la modification de la config Syncthing: {e}")
EOF

# Restart Syncthing to apply changes
log "Red√©marrage de Syncthing..."
docker-compose restart syncthing >/dev/null 2>&1

# Save Caddy info
cat > /tmp/caddy_info << EOF
CADDY_ENABLED=true
HTTPS_ENDPOINT=https://${SYNCTHING_HOSTNAME}.${DOMAIN_ROOT}
CADDY_CONFIG=/etc/caddy/Caddyfile
CADDY_LOGS=/var/log/caddy/syncthing.log
EOF

log "Caddy configur√© avec succ√®s ‚úÖ"

echo
info "=== Configuration Caddy termin√©e ==="
info "üîí HTTPS Endpoint: https://${SYNCTHING_HOSTNAME}.${DOMAIN_ROOT}"
info "üîó Redirections automatiques depuis les autres domaines"
info "üìã Configuration: /etc/caddy/Caddyfile"
info "üìù Logs: /var/log/caddy/syncthing.log"
info "üõ†Ô∏è  Gestion: systemctl {start|stop|restart} caddy"
echo
info "‚ö†Ô∏è  Note: Certificats auto-sign√©s par d√©faut"
info "üí° Pour Let's Encrypt: commentez 'tls internal' dans la config"
echo
